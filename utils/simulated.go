package utils

import (
	"context"
	"crypto/ecdsa"
	"fmt"
	"math/big"
	"path/filepath"
	"testing"

	"github.com/ethereum/go-ethereum/accounts"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/eth/ethconfig"
	"github.com/ethereum/go-ethereum/ethclient/simulated"
	"github.com/ethereum/go-ethereum/node"
	"github.com/ethereum/go-ethereum/params"
	hdwallet "github.com/miguelmota/go-ethereum-hdwallet"
	"github.com/stretchr/testify/require"
)

const (
	mnemonic             string = "test test test test test test test test test test test junk"
	multicall3Address           = "0xcA11bde05977b3631167028862bE2a173976CA11"
	multicall3BinRuntime        = "6080604052600436106100f35760003560e01c80634d2301cc1161008a578063a8b0574e11610059578063a8b0574e1461025a578063bce38bd714610275578063c3077fa914610288578063ee82ac5e1461029b57600080fd5b80634d2301cc146101ec57806372425d9d1461022157806382ad56cb1461023457806386d516e81461024757600080fd5b80633408e470116100c65780633408e47014610191578063399542e9146101a45780633e64a696146101c657806342cbb15c146101d957600080fd5b80630f28c97d146100f8578063174dea711461011a578063252dba421461013a57806327e86d6e1461015b575b600080fd5b34801561010457600080fd5b50425b6040519081526020015b60405180910390f35b61012d610128366004610a85565b6102ba565b6040516101119190610bbe565b61014d610148366004610a85565b6104ef565b604051610111929190610bd8565b34801561016757600080fd5b50437fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0140610107565b34801561019d57600080fd5b5046610107565b6101b76101b2366004610c60565b610690565b60405161011193929190610cba565b3480156101d257600080fd5b5048610107565b3480156101e557600080fd5b5043610107565b3480156101f857600080fd5b50610107610207366004610ce2565b73ffffffffffffffffffffffffffffffffffffffff163190565b34801561022d57600080fd5b5044610107565b61012d610242366004610a85565b6106ab565b34801561025357600080fd5b5045610107565b34801561026657600080fd5b50604051418152602001610111565b61012d610283366004610c60565b61085a565b6101b7610296366004610a85565b610a1a565b3480156102a757600080fd5b506101076102b6366004610d18565b4090565b60606000828067ffffffffffffffff8111156102d8576102d8610d31565b60405190808252806020026020018201604052801561031e57816020015b6040805180820190915260008152606060208201528152602001906001900390816102f65790505b5092503660005b8281101561047757600085828151811061034157610341610d60565b6020026020010151905087878381811061035d5761035d610d60565b905060200281019061036f9190610d8f565b6040810135958601959093506103886020850185610ce2565b73ffffffffffffffffffffffffffffffffffffffff16816103ac6060870187610dcd565b6040516103ba929190610e32565b60006040518083038185875af1925050503d80600081146103f7576040519150601f19603f3d011682016040523d82523d6000602084013e6103fc565b606091505b50602080850191909152901515808452908501351761046d577f08c379a000000000000000000000000000000000000000000000000000000000600052602060045260176024527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060445260846000fd5b5050600101610325565b508234146104e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4d756c746963616c6c333a2076616c7565206d69736d6174636800000000000060448201526064015b60405180910390fd5b50505092915050565b436060828067ffffffffffffffff81111561050c5761050c610d31565b60405190808252806020026020018201604052801561053f57816020015b606081526020019060019003908161052a5790505b5091503660005b8281101561068657600087878381811061056257610562610d60565b90506020028101906105749190610e42565b92506105836020840184610ce2565b73ffffffffffffffffffffffffffffffffffffffff166105a66020850185610dcd565b6040516105b4929190610e32565b6000604051808303816000865af19150503d80600081146105f1576040519150601f19603f3d011682016040523d82523d6000602084013e6105f6565b606091505b5086848151811061060957610609610d60565b602090810291909101015290508061067d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060448201526064016104dd565b50600101610546565b5050509250929050565b43804060606106a086868661085a565b905093509350939050565b6060818067ffffffffffffffff8111156106c7576106c7610d31565b60405190808252806020026020018201604052801561070d57816020015b6040805180820190915260008152606060208201528152602001906001900390816106e55790505b5091503660005b828110156104e657600084828151811061073057610730610d60565b6020026020010151905086868381811061074c5761074c610d60565b905060200281019061075e9190610e76565b925061076d6020840184610ce2565b73ffffffffffffffffffffffffffffffffffffffff166107906040850185610dcd565b60405161079e929190610e32565b6000604051808303816000865af19150503d80600081146107db576040519150601f19603f3d011682016040523d82523d6000602084013e6107e0565b606091505b506020808401919091529015158083529084013517610851577f08c379a000000000000000000000000000000000000000000000000000000000600052602060045260176024527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060445260646000fd5b50600101610714565b6060818067ffffffffffffffff81111561087657610876610d31565b6040519080825280602002602001820160405280156108bc57816020015b6040805180820190915260008152606060208201528152602001906001900390816108945790505b5091503660005b82811015610a105760008482815181106108df576108df610d60565b602002602001015190508686838181106108fb576108fb610d60565b905060200281019061090d9190610e42565b925061091c6020840184610ce2565b73ffffffffffffffffffffffffffffffffffffffff1661093f6020850185610dcd565b60405161094d929190610e32565b6000604051808303816000865af19150503d806000811461098a576040519150601f19603f3d011682016040523d82523d6000602084013e61098f565b606091505b506020830152151581528715610a07578051610a07576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060448201526064016104dd565b506001016108c3565b5050509392505050565b6000806060610a2b60018686610690565b919790965090945092505050565b60008083601f840112610a4b57600080fd5b50813567ffffffffffffffff811115610a6357600080fd5b6020830191508360208260051b8501011115610a7e57600080fd5b9250929050565b60008060208385031215610a9857600080fd5b823567ffffffffffffffff811115610aaf57600080fd5b610abb85828601610a39565b90969095509350505050565b6000815180845260005b81811015610aed57602081850181015186830182015201610ad1565b81811115610aff576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b84811015610bb1578583037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001895281518051151584528401516040858501819052610b9d81860183610ac7565b9a86019a9450505090830190600101610b4f565b5090979650505050505050565b602081526000610bd16020830184610b32565b9392505050565b600060408201848352602060408185015281855180845260608601915060608160051b870101935082870160005b82811015610c52577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0888703018452610c40868351610ac7565b95509284019290840190600101610c06565b509398975050505050505050565b600080600060408486031215610c7557600080fd5b83358015158114610c8557600080fd5b9250602084013567ffffffffffffffff811115610ca157600080fd5b610cad86828701610a39565b9497909650939450505050565b838152826020820152606060408201526000610cd96060830184610b32565b95945050505050565b600060208284031215610cf457600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610bd157600080fd5b600060208284031215610d2a57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81833603018112610dc357600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610e0257600080fd5b83018035915067ffffffffffffffff821115610e1d57600080fd5b602001915036819003821315610a7e57600080fd5b8183823760009101908152919050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1833603018112610dc357600080fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa1833603018112610dc357600080fdfea2646970667358221220449a18ce35be1adaedc9fa8ac86170e8c0f9b35e4a63d7b367123a4743501ae564736f6c634300080c0033"
)

var (
	wallet          *hdwallet.Wallet
	defaultGasToEoa *big.Int = new(big.Int).Mul(big.NewInt(10000), big.NewInt(params.Ether))
	privateKeys              = make(map[common.Address]*ecdsa.PrivateKey)
)

func SetDefaultGasToEoa(value *big.Int) {
	defaultGasToEoa.Set(value)
}

func GetPrivateKey(t *testing.T, address common.Address) *ecdsa.PrivateKey {
	pk, ok := privateKeys[address]
	require.True(t, ok)
	return pk
}

func Multicall3Address() common.Address {
	return common.HexToAddress(multicall3Address)
}

type Backend struct {
	*simulated.Backend
	chainId *big.Int
	ipcPath string
	owner   *bind.TransactOpts
	eoas    []*bind.TransactOpts
}

func NewBackend(t *testing.T, options ...func(nodeConf *node.Config, ethConf *ethconfig.Config)) *Backend {
	var err error
	wallet, err = hdwallet.NewFromMnemonic(mnemonic)
	require.NoError(t, err)
	account, err := wallet.Derive(accounts.DefaultBaseDerivationPath, false)
	require.NoError(t, err)
	ownerPk, err := wallet.PrivateKey(account)
	require.NoError(t, err)

	ipcPath := filepath.Join(t.TempDir(), "sim.ipc")

	backend := simulated.NewBackend(types.GenesisAlloc{
		account.Address: types.Account{
			Balance: abi.MaxInt256, // Uint256 / 2
		},
		Multicall3Address(): {
			Code: common.Hex2Bytes(multicall3BinRuntime),
		},
	}, append(options, func(nodeConf *node.Config, ethConf *ethconfig.Config) {
		nodeConf.IPCPath = ipcPath
	})...)
	backend.Commit()

	chainId, err := backend.Client().ChainID(context.TODO())
	require.NoError(t, err)

	owner, err := bind.NewKeyedTransactorWithChainID(ownerPk, chainId)
	require.NoError(t, err)

	privateKeys[owner.From] = ownerPk
	return &Backend{
		Backend: backend,
		chainId: chainId,
		ipcPath: ipcPath,
		owner:   owner,
		eoas:    make([]*bind.TransactOpts, 0),
	}
}

func (backend *Backend) Owner() *bind.TransactOpts {
	return backend.owner
}

func (backend *Backend) GetEoas(t *testing.T, count uint32, callbacks ...func(eoa *bind.TransactOpts)) []*bind.TransactOpts {
	length := uint32(len(backend.eoas))
	if length < count {
		for path := length; path < count; path++ {
			account, err := wallet.Derive(append(accounts.DefaultRootDerivationPath, path+1), false)
			require.NoError(t, err)
			pk, err := wallet.PrivateKey(account)
			require.NoError(t, err)
			txOpts, err := bind.NewKeyedTransactorWithChainID(pk, backend.chainId)
			require.NoError(t, err)
			backend.eoas = append(backend.eoas, txOpts)
			privateKeys[txOpts.From] = pk
			if defaultGasToEoa.Sign() > 0 {
				_, err = backend.Transfer(backend.owner, txOpts.From, defaultGasToEoa)
				require.NoError(t, err)
			}
		}
		if defaultGasToEoa.Sign() > 0 {
			backend.Commit()
		}
	}

	eoas := backend.eoas[:count]
	commit := false
	for _, eoa := range eoas {
		for _, callback := range callbacks {
			if callback != nil {
				callback(eoa)
				commit = true
			}
		}
	}
	if commit {
		backend.Commit()
	}

	return eoas
}

func (backend *Backend) Transfer(from *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	ctx := from.Context
	if ctx == nil {
		ctx = context.Background()
	}
	client := backend.Client()
	// Estimate TipCap
	gasTipCap := from.GasTipCap
	if gasTipCap == nil {
		tip, err := client.SuggestGasTipCap(ctx)
		if err != nil {
			return nil, err
		}
		gasTipCap = tip
	}
	// Estimate FeeCap
	gasFeeCap := from.GasFeeCap
	if gasFeeCap == nil {
		head, err := client.HeaderByNumber(ctx, nil)
		if err != nil {
			return nil, err
		}
		gasFeeCap = new(big.Int).Add(
			gasTipCap,
			new(big.Int).Mul(head.BaseFee, big.NewInt(2)),
		)
	}
	if gasFeeCap.Cmp(gasTipCap) < 0 {
		return nil, fmt.Errorf("maxFeePerGas (%v) < maxPriorityFeePerGas (%v)", gasFeeCap, gasTipCap)
	}
	// create the transaction
	nonce := from.Nonce
	if nonce == nil {
		if n, err := client.PendingNonceAt(ctx, from.From); err != nil {
			return nil, err
		} else {
			nonce = big.NewInt(int64(n))
		}
	}
	baseTx := &types.DynamicFeeTx{
		To:        &to,
		Nonce:     nonce.Uint64(),
		GasFeeCap: gasFeeCap,
		GasTipCap: gasTipCap,
		Gas:       21000,
		Value:     amount,
		Data:      nil,
	}

	tx, err := from.Signer(from.From, types.NewTx(baseTx))
	if err != nil {
		return nil, err
	}

	return tx, client.SendTransaction(ctx, tx)
}

func (backend *Backend) IPCPath() string {
	return backend.ipcPath
}
